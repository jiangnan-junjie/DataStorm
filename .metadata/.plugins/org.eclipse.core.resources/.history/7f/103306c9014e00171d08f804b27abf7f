/**    
 * 文件名：Session.java    
 *    
 * 版本信息：    
 * 日期：2017年6月10日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package RecviceData;

import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import Util.DataPackaget;
import Util.IDataPackaget;

/**    
 *     
 * 项目名称：DataStromUtil    
 * 类名称：Session    
 * 类描述：    
 * 创建人：jinyu    
 * 创建时间：2017年6月10日 下午5:17:26    
 * 修改人：jinyu    
 * 修改时间：2017年6月10日 下午5:17:26    
 * 修改备注：    
 * @version     
 *     
 */
public class Session {
  public Session()
  {
      buffers=new  LinkedList<ReceiveBuffer>();
      buffer=new ReceiveBuffer(128,0);
      buffers.add(buffer);
  }
  /*
   * 来源Ip
   */
public String srcIP;
/*
* 来源端口
*/
public int srcPort;
/*
* 通讯协议类型 0 tcp  1 udp  2 组播 3 广播
*/
public int  netType;

public byte reqCall;

/*
* 需要socket通讯时保持
* 一般直接保持服务端的socket或者tcp客户端
*/
public Object socket;//
public long id;
public String flage;
public LinkedList<ReceiveBuffer> buffers;
private int size=1;
private int writePosition=0;
private ReceiveBuffer buffer;
private AppData currentChunk=null;
private ReceiveBuffer readBuffer;
private Lock lock = new ReentrantLock();// 锁对象 

/**
 * 保存数据
 */
public void addData(IDataPackaget  data)
{
    DataPackaget  tmp=(DataPackaget) data;
    reqCall=tmp.reqCall;
    AppData buf=new AppData(tmp.packagetID, tmp.data);
    boolean r=  setData(buf);
    if(!r)
    {
        //
        lock.lock();
        writePosition++;//先升级读取位置
        if( writePosition==size)
          {
           buffer=new ReceiveBuffer(128,0);
           buffers.add(buffer);
           size++;
          }
        lock.unlock();
        this.setData(buf);
    }
    
}

/*
 * 保存
 */
private boolean  setData(AppData data)
{
    return buffer.offer(data);
}
public byte[] read()
{
    ArrayList<byte[]> list=new   ArrayList<byte[]>();
    int len=0;
    while(true)
    {
        try{
            int read=0;
            updateCurrentChunk(false);//取一次数据
            while(currentChunk!=null){
                byte[]data=currentChunk.data;
                list.add(data);
                len+=data.length;
                updateCurrentChunk(true);
            }
           if()
            //no more data
            return -1;
    }
}
private void updateCurrentChunk(boolean block)
{
    readBuffer=buffers.removeFirst();
    if(currentChunk!=null)return;
    while(true){
        try{
            if(block){
                 currentChunk=readBuffer.poll(1, TimeUnit.MILLISECONDS);//整个取出
                while (currentChunk==null){
                    //循环直到取出
                    currentChunk=readBuffer.poll(1000, TimeUnit.MILLISECONDS);
                }
            }
            else currentChunk=readBuffer.poll(100, TimeUnit.MILLISECONDS);
           //不管取不取都执行
        }catch(InterruptedException ie){
            IOException ex=new IOException();
            ex.initCause(ie);
        }
        return;//跳出循环
    }
}
}
