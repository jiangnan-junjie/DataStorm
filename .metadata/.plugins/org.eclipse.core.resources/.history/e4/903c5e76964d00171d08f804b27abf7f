/**    
 * 文件名：RecviceBuffer.java    
 *    
 * 版本信息：    
 * 日期：2017年6月10日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package RecviceData;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

/**    
 *     
 * 项目名称：DataStromUtil    
 * 类名称：RecviceBuffer    
 * 类描述：   数据存储 
 * 创建人：jinyu    
 * 创建时间：2017年6月10日 上午11:10:34    
 * 修改人：jinyu    
 * 修改时间：2017年6月10日 上午11:10:34    
 * 修改备注：    
 * @version     
 *     
 */
public class ReceiveBuffer {
    private final AppData[]buffer;

    //the head of the buffer: contains the next chunk to be read by the application, 
    //i.e. the one with the lowest sequence number
    private volatile int readPosition=0;

    //the lowest sequence number stored in this buffer
    private final long initialSequenceNumber;

    //number of chunks
    private final AtomicInteger numValidChunks=new AtomicInteger(0);

    //lock and condition for poll() with timeout
    private final Condition notEmpty;
    private final ReentrantLock lock;

    //the size of the buffer
    private final int size;
    public ReceiveBuffer(int size, long initialSequenceNumber){
        this.size=size;
        this.buffer=new AppData[size];
        this.initialSequenceNumber=initialSequenceNumber;
        lock=new ReentrantLock(false);
        notEmpty=lock.newCondition();
    }
    public boolean offer(AppData data){
        if(numValidChunks.get()==size) {
            return false;//如果获取的大小等于当前大小，则已经满了，不能存储
        }
        lock.lock();
        try{
            long seq=data.getSequenceNumber();//获取包中seq
            int insert=(int) (seq% size);//计算存储顺序位置
            buffer[insert]=data;//保存数据
            numValidChunks.incrementAndGet();//存储增长
            notEmpty.signal();//唤醒读取
            return true;
        }finally{
            lock.unlock();
        }
    }
    public AppData poll(int timeout, TimeUnit units)throws InterruptedException{
        lock.lockInterruptibly();//获取锁
        long nanos = units.toNanos(timeout);//转换毫秒

        try {
            for (;;) {
                //循环读取，直到没有数据
                if (numValidChunks.get() != 0) {
                    return poll();
                }
                if (nanos <= 0)
                    return null;//等待完时间还是没有数据
                try {
                    //没有数据时等待
                    nanos = notEmpty.awaitNanos(nanos);
                } catch (InterruptedException ie) {
                    notEmpty.signal(); // 
                    throw ie;
                }

            }
        } finally {
            lock.unlock();
        }
    }
    /**
     * return a data chunk, guaranteed to be in-order. 
     */
    public AppData poll(){
        if(numValidChunks.get()==0){
            return null;//没有数据
        }
        AppData r=buffer[readPosition];
        if(r!=null){
            long thisSeq=r.getSequenceNumber();
            if(1==SequenceNumber.seqOffset(highestReadSequenceNumber,thisSeq)){
                increment();
                highestReadSequenceNumber=thisSeq;
            }
            else return null;
        }
        return r;
    }

    public int getSize(){
        return size;
    }

    void increment(){
        buffer[readPosition]=null;
        readPosition++;
        if(readPosition==size)readPosition=0;
        numValidChunks.decrementAndGet();
    }

    public boolean isEmpty(){
        return numValidChunks.get()==0;
    }

}
