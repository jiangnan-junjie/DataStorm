package DataBus;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;

/*
 * 缓存数据
 */
public class CacheData<K,V> {
    public static boolean isLoadDB=false;
    Cache<K, V> cache=null;
    CacheTimeListenter<K,V> listener=null;
    public void setListenter(CacheTimeListenter<K, V> listener)
    {
        this.listener=listener;
    }
   public  CacheData(long maxsize,int time)
  {
   cache = (Cache<K, V>) CacheBuilder.newBuilder()
                    .maximumSize(maxsize)
                    .initialCapacity(4)
                    .expireAfterAccess(time, TimeUnit.SECONDS)
                    .build(
                            new CacheLoader<K, V>() {
                         
                                                public V load(K key) { // no checked exception
                                                  if(isLoadDB)
                                                  {
                                                      return getDBKey( key);
                                                  }
                                                  else
                                                  {
                                                      return null;
                                                  }
                 
                                                }});

  }
  
  /**
   * 加载
   */
  public V getDBKey(K key)
  {
   
   return   listener.getDB(key);
  }
  /*
   * 直接存储
   */
 public void put(K key, V v)
 {
     cache.put(key, v);
 }
 
 /*
  * 获取值
  */
 public V getByKey(K key)
 {
     try {
        return cache.get(key, null);
    } catch (ExecutionException e) {
        e.printStackTrace();
      return null;
    }
 }
 public void  remove(K key)
 {
     cache.invalidate(key);
 }
}
