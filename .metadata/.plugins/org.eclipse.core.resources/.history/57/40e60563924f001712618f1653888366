/**    
 * 文件名：ClientAck.java    
 *    
 * 版本信息：    
 * 日期：2017年6月12日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package FactoryPackaget;

import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.HashSet;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import CacheDataReset.CacheModel;
import CacheDataReset.DataCacheBus;
import NetProtocol.judpClient;

/**    
 *     
 * 项目名称：NetProtocol    
 * 类名称：ClientAck    
 * 类描述：    
 * 创建人：jinyu    
 * 创建时间：2017年6月12日 下午10:45:52    
 * 修改人：jinyu    
 * 修改时间：2017年6月12日 下午10:45:52    
 * 修改备注：    
 * @version     
 *     
 */
 public class ClientAck {
 private static   ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  
 private static  HashSet<judpClient> ackClient = new HashSet<judpClient>();
static // private static WeakHashMap<judpClient,Long> map=new WeakHashMap<judpClient,Long>();
 ReferenceQueue<judpClient> refQueue = new ReferenceQueue<judpClient>();  
 
 
 
 /*
   * 添加获取ack
   */
  public static void put(judpClient client) 
{
    if(ackClient.add(client))
    {
        //WeakReference<judpClient> wr = new WeakReference<judpClient>(client,refQueue);
        cachedThreadPool.execute(new Runnable(){

            @Override
            public void run() {
                while(true)
                {
                try
                {
               byte[] ack=client.getCallBackData();
               ReturnCode code=SubNetPackaget.AnalysisNetPackaget(ack);
               if(code.isAck)
                {
                   String key=String.valueOf(code.ackPackaget.sessionid)+String.valueOf(code.ackPackaget.packagetID);
                   CacheModel model=DataCacheBus.getInstance().get(key);
                  if(code.ackPackaget.ackType==1)
                  {
                      //该session所有包清除
                      
                      DataCacheBus.getInstance().remove(key);
                      //结束以后，判断是否逻辑关闭了
                      if(client.isClose())
                      {
                          model.client.close();
                          //需要真正关闭
                      }
                  }
                  else if(code.ackPackaget.ackType==2)
                  {
                      model.client.sendData(model.remoteHost, model.remotePort, model.data);
                  }
                }
               if(client.isClose())
               {
                   ackClient.remove(client);
               }
                }
                catch(Exception ex)
                {
                    if(client.isClose())
                    {
                        ackClient.remove(client);
                    }
                    return;
                }
                }
            }
            
        });
    }
}
}
