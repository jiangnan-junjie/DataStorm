/**    
 * 文件名：RecviceBuffer.java    
 *    
 * 版本信息：    
 * 日期：2017年6月10日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package RecviceData;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

/**    
 *     
 * 项目名称：DataStromUtil    
 * 类名称：RecviceBuffer    
 * 类描述：   数据存储 
 * 创建人：jinyu    
 * 创建时间：2017年6月10日 上午11:10:34    
 * 修改人：jinyu    
 * 修改时间：2017年6月10日 上午11:10:34    
 * 修改备注：    
 * @version     
 *     
 */
public class ReceiveBuffer {
    private final AppData[]buffer;

    //the head of the buffer: contains the next chunk to be read by the application, 
    //i.e. the one with the lowest sequence number
    private volatile int readPosition=0;

    //the lowest sequence number stored in this buffer
    private final long initialSequenceNumber;

    //the highest sequence number already read by the application
    private long highestReadSequenceNumber;

    //number of chunks
    private final AtomicInteger numValidChunks=new AtomicInteger(0);

    //lock and condition for poll() with timeout
    private final Condition notEmpty;
    private final ReentrantLock lock;

    //the size of the buffer
    private final int size;
    public ReceiveBuffer(int size, long initialSequenceNumber){
        this.size=size;
        this.buffer=new AppData[size];
        this.initialSequenceNumber=initialSequenceNumber;
        lock=new ReentrantLock(false);
        notEmpty=lock.newCondition();
        highestReadSequenceNumber=SequenceNumber.decrement(initialSequenceNumber);
    }

}
