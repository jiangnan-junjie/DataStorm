/**    
 * 文件名：ServerTimer.java    
 *    
 * 版本信息：    
 * 日期：2017年6月14日    
 * Copyright 足下 Corporation 2017     
 * 版权所有    
 *    
 */
package ListernerServer;

import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

import FactoryPackaget.SubNetPackaget;
import RecviceData.AckCache;

/**    
 *     
 * 项目名称：DataStromServer    
 * 类名称：ServerTimer    
 * 类描述：  定时上报服务状态给所有中心
 * 当前通过组播发送（地址已经固化ConfigModel）  
 * 创建人：jinyu    
 * 创建时间：2017年6月14日 下午11:45:52    
 * 修改人：jinyu    
 * 修改时间：2017年6月14日 下午11:45:52    
 * 修改备注：    
 * @version     
 *     
 */
public class ServerTimer {
    private static Thread ackReset=null;//检查线程
    private static ReentrantLock lock=new ReentrantLock();
    protected static boolean isRuning;//控制线程启动
    /*
     * 启动线程发送ack
     */
    private static void startThread()
    {
     
      
            try
            {
            if(ackReset==null)
            {
                ackReset=new   Thread(new Runnable()
                        {
                           @Override
                           public void run() {
                               int count=0;
                               Long  sessionid=null;
                              while(isRuning)
                              {
                               try {
                                   if(count>10000)
                                   {
                                       Thread.sleep(100);//10w次运算
                                       count=0;
                                   }
                                   //
                                   if(ackQueue.isEmpty())
                                   {
                                       sessionid=handOffer.poll(100, TimeUnit.MILLISECONDS);
                                       //已经为空
                                       Thread.sleep(1000);
                                       //互换
                                       if(!freeQueue.isEmpty())
                                       {
                                       LinkedBlockingQueue<AckCache> tmp=ackQueue;
                                       ackQueue= freeQueue;
                                       ackQueue=tmp;
                                       }
                                   }
                                  AckCache e=ackQueue.take();
                                  if(sessionid!=null&&e.ack.sessionid==sessionid.longValue())
                                  {
                                      //已经不需要发送了；
                                      continue;
                                  }
                                  if(!e.client.isClose())
                                  {
                                     //如果外部真正关闭socket则不发送了
                                     //逻辑上收到了接收方的接收完成信息
                                   byte[] ackbytes=  SubNetPackaget.createAckPackaget(e.ack);
                                   e.client.sendData(e.srcIP, e.srcPort, ackbytes);
                                   e.ackNum++;
                                  if(e.ackNum<maxNum)
                                  {
                                      //外部没有关闭
                                     // ackQueue.offer(e);
                                      freeQueue.offer(e);
                                  }
                                  count++;
                                  }
                               } catch (InterruptedException e) {
                                   e.printStackTrace();
                               }
                               
                              }
                           }
                    
                        });
                ackReset.setDaemon(true);
                ackReset.setName("sendAckThread");
                ackReset.start();
                    
                }
            }
            finally
            {
                lock.unlock();
            }
        }
        ackQueue.clear();
        freeQueue.clear();
    }


}
